<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" 
						creationComplete="windowedapplication1_creationCompleteHandler(event)" 
						fontSize="14" layout="absolute"
						 width="480" height="600"
						nativeDragDrop="nativeDragDropHandler(event)" 
						nativeDragEnter="nativeDragEnterHandler(event)" 
						showStatusBar="false" showTitleBar="false" 
						title="Exif Reader: lhw1987654@163.com">

	<mx:Script>
		<![CDATA[
			import air.update.ApplicationUpdaterUI;
			import air.update.events.UpdateEvent;
			
			import fox.photo.ExifExtractor;
			import fox.photo.jpeg.Exif;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.logging.Log;
			import mx.logging.LogEventLevel;
			import mx.logging.targets.TraceTarget;

			private static const AIR_FILE_LIST:String="air:file list";
			[Bindable]
			private var datas:ArrayCollection;

			protected function nativeDragDropHandler(event:NativeDragEvent):void
			{
				var files:*=event.clipboard.getData(AIR_FILE_LIST);
				var target:File=checkFileInDrag(files);
				trace("target path:", target.nativePath);
				var bytes:ByteArray=new ByteArray;
				var stream:FileStream=new FileStream();
				stream.open(target, FileMode.READ);
				stream.readBytes(bytes);
				stream.close();
				trace("target length:", bytes.length);
				readExifFrom(bytes);
			}

			protected function nativeDragEnterHandler(event:NativeDragEvent):void
			{
				if (!event.clipboard.hasFormat(AIR_FILE_LIST))
					return;
				var files:*=event.clipboard.getData(AIR_FILE_LIST);
				var target:File=checkFileInDrag(files);
				if (!target)
					return;
				NativeDragManager.acceptDragDrop(this);
			}

			private function checkFileInDrag(files:Array):File
			{
				var jpegReg:RegExp=/\.jpg|\.jpeg$/i;
				var target:File=null;
				for each (var file:File in files)
				{
					if (jpegReg.test(file.nativePath))
					{
						target=file;
						break;
					}
				}
				return target;
			}

			private function readExifFrom(bytes:ByteArray):void
			{
				bytes.position=0;
				var exif:Exif=ExifExtractor.readExif(bytes);
				var token:String=exif.userful.make+" "+exif.userful.model;
				info = "";		
				info += "Token by "+ (token.replace(/\s+/g,'').length?token:'unknown');
				info += ", "+exif.userful.width+"x"+exif.userful.height+"px";
				if(exif.userful.date)
					info += " on "+exif.userful.date.toDateString()
				
				datas=new ArrayCollection(exif.tags);
			}

			protected function windowedapplication1_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				initLogging();
				this.checkUpdate();
			}
			protected var appUpdater:ApplicationUpdaterUI=new ApplicationUpdaterUI(); // Used for auto-update


			// Initialize appUpdater and set some properties
			[Bindable]
			private var info:String;
			protected function checkUpdate():void
			{
				// set the URL for the update.xml file
				appUpdater.updateURL="http://www.raisedtech.com/ExifViewer/ExifViewer.update.xml";
				appUpdater.addEventListener(UpdateEvent.INITIALIZED, onUpdate);
				appUpdater.addEventListener(ErrorEvent.ERROR, onUpdaterError);
				appUpdater.isCheckForUpdateVisible=false;
				appUpdater.isFileUpdateVisible=false;
				appUpdater.isInstallUpdateVisible=false;
				appUpdater.initialize();
			}

			// Handler function triggered by the ApplicationUpdater.initialize.
			// The updater was initialized and it is ready to take commands.
			protected function onUpdate(event:UpdateEvent):void
			{
				// start the process of checking for a new update and to install
				trace(event);
				appUpdater.checkNow();
			}

			// Handler function for error events triggered by the ApplicationUpdater.initialize
			protected function onUpdaterError(event:ErrorEvent):void
			{
				trace(event);
			}

			private function initLogging():void
			{
				/* Create a target. */
				var logTarget:TraceTarget=new TraceTarget();
				logTarget.level=LogEventLevel.ALL;
				logTarget.includeDate=false;
				logTarget.includeTime=true;
				logTarget.includeCategory=true;
				logTarget.includeLevel=true;

				/* Begin logging. */
				Log.addTarget(logTarget);
			}
		]]>
	</mx:Script>
	<mx:VBox left="0" right="0" top="0" bottom="0">
		<mx:Text width="100%" text="{info}" />
		<mx:DataGrid id="dg" visible="{datas!=null}" width="100%" height="100%" dataProvider="{datas}" includeInLayout="{datas!=null}" variableRowHeight="true">
			<mx:columns>
				<mx:DataGridColumn dataField="tag" width="80" headerText="Tag"/>
				<mx:DataGridColumn dataField="name" headerText="Name" itemRenderer="IFDNameItemRednerer"/>
				<mx:DataGridColumn dataField="value" headerText="Value"/>
			</mx:columns>
		</mx:DataGrid>
	</mx:VBox>
	<mx:Text visible="{datas==null}" color="#8B8B8B" fontFamily="Arial" fontSize="40" fontWeight="bold" horizontalCenter="0" includeInLayout="{datas==null}" text="Drag &amp; Drop photo here"
			 verticalCenter="0"/>


</mx:WindowedApplication>
